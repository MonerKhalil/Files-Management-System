<?php

namespace App\Helpers\ClassesBase\Models;

use App\Helpers\ClassesProcess\LanguageProcess;
use App\Helpers\ClassesStatic\AdapterData;
use App\Helpers\MyApp;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;

abstract class BaseTranslationModel extends BaseModel
{
    #protected $with = ["translations"];

    public abstract function fieldsTranslation():array;

    public abstract function translations();

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope("translation_scope",new TranslationScope());
    }

    /**
     * @param $item
     * @return mixed
     * @author moner khalil
     */
    public function dataTransform($item){
        $tempData = $item;
        $relations = $this->getRelations();
        foreach ($relations as $k_relation => $v_relation){
            if ($k_relation == "translations"){
                continue;
            }
            if ($v_relation instanceof Collection){
                $tempData->{$k_relation} = AdapterData::manyDataTranslation($v_relation);
                if (isset($this->relations[$k_relation])){
                    unset($this->relations[$k_relation]);
                }
            }elseif ($v_relation instanceof Model){
                $tempData->{$k_relation} = AdapterData::singleDataTranslation($v_relation);
                if (isset($this->relations[$k_relation])){
                    unset($this->relations[$k_relation]);
                }
            }
        }
        $translations = $item->translations;
        return $this->finalItemDataTranslation($item,$translations);
    }

    /**
     * @param $item
     * @param $translations
     * @return mixed
     * @author moner khalil
     */
    private function finalItemDataTranslation($item, $translations){
        $typeDataTranslation = request()->header(LanguageProcess::TYPE_DATA_RELATION_TRANS_HEADER_REQUEST,LanguageProcess::DATA_DIRECT_TRANSLATION);
        return match ($typeDataTranslation){
            LanguageProcess::DATA_ALL_TRANSLATIONS_WITH_DEFAULT => $this->resolveTranslationsInItem($item,$translations),
            default => $this->translationItemDirect($item,$translations),
        };
    }
    ###################################### Start Functions Type Translation Resolve Item Translations ######################################

    /**
     * @param $item
     * @param $translations
     * @return mixed
     * @author moner khalil
     */
    private function resolveTranslationsInItem($item, $translations){
        $languageProcess = MyApp::Classes()->languageProcess;
        $langCurrent = $languageProcess->getLanguageLocal();
        $tempTranslations = [];
        $tempTranslation = null;
        $translations = collect($translations)->all();
        foreach ($translations as $translation){
            if ($translation->{$languageProcess->getFkLanguageInTranslationTable()} == $langCurrent->id){
                $tempTranslation = $translation;
                continue;
            }
            $tempTranslations[] = $translation;
        }
        $item->translation = $tempTranslation;
        $item->translations = $tempTranslations;
        return $item;
    }

    ###################################### End Functions Type Translation Resolve Item Translations ######################################

    ###################################### Start Functions Direct Translation Item ######################################

    /**
     * @param $item
     * @param $translations
     * @return mixed
     * @author moner khalil
     */
    private function translationItemDirect($item, $translations){
        $tempItem = $item;
        $objTranslation = $this->getTranslationFinal($item,$translations);
        foreach ($this->fieldsTranslation() as $field){
            $tempItem->{$field} = $objTranslation[$field] ?? $objTranslation->{$field} ?? null;
        }
        unset($item->translations);
        return $tempItem;
    }

    /**
     * @param BaseTranslationModel $item
     * @param mixed $relationTranslationItem
     * @return mixed
     * @author moner-khalil
     */
    private function getTranslationFinal(self $item, mixed $relationTranslationItem): mixed
    {
        $languageProcess = MyApp::Classes()->languageProcess;
        $langDefault = $languageProcess->getLanguageDefault();
        $langCurrent = $languageProcess->getLanguageLocal();
        $translations = collect($relationTranslationItem);
        $translations = $translations->where($languageProcess->getFkMainTableInTranslationTable(),$item->id);
        $currentTranslation = $translations->where($languageProcess->getFkLanguageInTranslationTable(),$langCurrent->id)->first();
        $defaultTranslation = $translations->where($languageProcess->getFkLanguageInTranslationTable(),$langDefault->id)->first();
        return $currentTranslation ?? $defaultTranslation ?? null;
    }

    ###################################### End Functions Direct Translation Item ######################################
}
