<?php

namespace App\Http\CrudFiles\Repositories\Eloquent;

use App\DTO\GroupManagerDTO;
use App\Helpers\MyApp;
use App\Http\CrudFiles\Repositories\Interfaces\IGroupManagerRepository;
use App\Http\CrudFiles\ViewFields\GroupManagerViewFields;
use App\Http\CrudFiles\Actions\GroupManagerAction;
use App\Models\GroupManager;
use App\Helpers\ClassesBase\Repositories\BaseRepository;
use App\Helpers\ClassesBase\BaseViewFields;
use App\Helpers\ClassesBase\Routes\CrudActions;

class GroupManagerRepository extends BaseRepository implements IGroupManagerRepository
{
    public function model(){
        return GroupManager::class;
    }

    public function queryModel(){
        return GroupManager::query();
    }

    public function viewFields():BaseViewFields{
        return new GroupManagerViewFields($this);
    }

    public function actions():CrudActions{
        return new GroupManagerAction($this);
    }

    public function create($data, bool $showMessage = true): mixed
    {
        $data['name'] = MyApp::Classes()->stringProcess->uniqueColumn($data['name'],$this->queryModel()->where("user_id",$data['user_id']),"name",null,false);
        return parent::create((new GroupManagerDTO($data))->toArray(), $showMessage); // TODO: Change the autogenerated stub
    }

    public function update($data, $itemId, bool $showMessage = true, ?callable $callback = null): mixed
    {
        $data['name'] = MyApp::Classes()->stringProcess->uniqueColumn($data['name'],$this->queryModel()->where("user_id",$data['user_id']),"name",$itemId,false);
        return parent::update((new GroupManagerDTO($data))->toArray(), $itemId, $showMessage, $callback);
    }
}
